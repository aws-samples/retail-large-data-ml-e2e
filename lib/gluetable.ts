import { Construct } from 'constructs';
import * as glue from '@aws-cdk/aws-glue-alpha';
import * as s3 from 'aws-cdk-lib/aws-s3';
import * as gl from 'aws-cdk-lib/aws-glue';

export interface GlueTableProps {
  readonly tableName: string;
  readonly database: glue.IDatabase;
  readonly bucket: s3.IBucket;
  readonly s3Prefix?: string;
  readonly columns: gl.CfnTable.ColumnProperty[];
  readonly partitionKeys?: gl.CfnTable.ColumnProperty[];
}

export class GlueTable extends Construct {
  readonly tableName: string;
  readonly tbl: gl.CfnTable;
  constructor(scope: Construct, id: string, props: GlueTableProps) {
    super(scope, id);
    this.tableName = props.tableName;

    this.tbl = new gl.CfnTable(this, 'Table', {
      catalogId: props.database.catalogId,
      databaseName: props.database.databaseName,
      tableInput: {
        name: props.tableName,
        description: 'generated by CDK',
        tableType: 'EXTERNAL_TABLE',
        parameters: {
          classification: 'csv',
          has_encrypted_data: true,
          'skip.header.line.count': 1
        },
        storageDescriptor: {
          location: props.bucket.s3UrlForObject(props.s3Prefix),
          compressed: false,
          storedAsSubDirectories: false,
          columns: props.columns,
          inputFormat: glue.InputFormat.TEXT.className,
          outputFormat: glue.OutputFormat.HIVE_IGNORE_KEY_TEXT.className,
          serdeInfo: {
            serializationLibrary: glue.SerializationLibrary.OPEN_CSV.className
          }
        },
        partitionKeys: props.partitionKeys
      }
    });
  }
}
